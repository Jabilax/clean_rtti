 //------------------------------------------------------------------------------  
 // <auto-generated>                                                               
 //    This code was generated from a parser.                                      
 //                                                                                
 //    Manual changes to this file will be overwritten if the code is regenerated. 
 // </auto-generated>                                                              
 //------------------------------------------------------------------------------  

#pragma once
#include <array>

template<class T2, class T = T2> struct Reflect {};
template<class T2, class T = T2> struct MemberVariable {};
template<class T> struct EnumValue { const char* name; T value; };

struct MyStruct;

template<class T>
struct MemberVariable<MyStruct, T>
{
    constexpr MemberVariable(const char* name, int index) : name{ name }, index{ index } {}

    template<class Fn>
    void apply(T& object, Fn callback) const
    {
        switch (index)
        {
        case 0: callback(object.first_var); break;
        case 1: callback(object.second_var); break;
        case 2: callback(object.ptr); break;
        }
    }

    const char* name;

private:
    int index;
};

template<class T>
struct Reflect<MyStruct, T>
{
    static constexpr const char* name{ "MyStruct" };
    static constexpr std::array<MemberVariable<T>, 3> variables
    {
        MemberVariable<T>{"first_var", 0},
        MemberVariable<T>{"second_var", 1},
        MemberVariable<T>{"ptr", 2},
    };
};


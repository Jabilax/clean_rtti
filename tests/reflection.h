 //------------------------------------------------------------------------------  
 // <auto-generated>                                                               
 //    This code was generated from a parser.                                      
 //                                                                                
 //    Manual changes to this file will be overwritten if the code is regenerated. 
 // </auto-generated>                                                              
 //------------------------------------------------------------------------------  

#pragma once
#include <array>
#include <vector>

template<class T2, class T = T2> struct Reflect {};
template<class T2, class T = T2> struct MemberVariable {};
template<class T> struct EnumValue { const char* name; T value; };
struct Attribute { const char* name; std::vector<const char*> arguments; };

struct Person;

template<class T>
struct MemberVariable<Person, T>
{
    constexpr MemberVariable(const char* name, int index) : name{ name }, index{ index } {}

    template<class Fn>
    void get(const T& object, Fn callback) const
    {
        switch (index)
        {
        case 0: callback(object.name); break;
        case 1: callback(object.age); break;
        }
    }

    auto attributes() -> std::vector<Attribute> const
    {
        switch (index)
        {
        }
        return std::vector<Attribute>{};
    }

    const char* name;

private:
    int index;
};

template<class T>
struct Reflect<Person, T>
{
    static constexpr const char* name{ "Person" };
    static constexpr std::array<MemberVariable<T>, 2> variables
    {
        MemberVariable<T>{"name", 0},
        MemberVariable<T>{"age", 1},
    };
};

struct Human;

template<class T>
struct MemberVariable<Human, T>
{
    constexpr MemberVariable(const char* name, int index) : name{ name }, index{ index } {}

    template<class Fn>
    void get(const T& object, Fn callback) const
    {
        switch (index)
        {
        }
    }

    auto attributes() -> std::vector<Attribute> const
    {
        switch (index)
        {
        }
        return std::vector<Attribute>{};
    }

    const char* name;

private:
    int index;
};

template<class T>
struct Reflect<Human, T>
{
    static constexpr const char* name{ "Human" };
    static constexpr std::array<MemberVariable<T>, 0> variables
    {
    };
};

